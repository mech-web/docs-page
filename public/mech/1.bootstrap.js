(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./editor.js":
/*!*******************!*\
  !*** ./editor.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mech_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mech-wasm */ \"./node_modules/mech-wasm/mech_wasm.js\");\n\n\nlet mech_core = mech_wasm__WEBPACK_IMPORTED_MODULE_0__[\"Core\"].new(100000, 100);\nmech_core.connect_remote_core(\"ws://localhost:3012\");\nvar interval;\n\nlet time = 1;\n\n// ## Controls\n/*\nlet controls = document.createElement(\"div\");\ncontrols.setAttribute(\"class\", \"controls\");\n\nlet compile = document.createElement(\"button\");\ncompile.setAttribute(\"id\", \"compile\");\ncompile.innerHTML =  \"Compile\";\ncontrols.appendChild(compile);\n\nlet view_core = document.createElement(\"button\");\nview_core.setAttribute(\"id\", \"view core\");\nview_core.innerHTML =  \"View Core\";\ncontrols.appendChild(view_core);\n\nlet view_runtime = document.createElement(\"button\");\nview_runtime.setAttribute(\"id\", \"view runtime\");\nview_runtime.innerHTML =  \"View Runtime\";\ncontrols.appendChild(view_runtime);\n\nlet clear_core = document.createElement(\"button\");\nclear_core.setAttribute(\"id\", \"clear core\");\nclear_core.innerHTML =  \"Clear Core\";\ncontrols.appendChild(clear_core);\n\nlet txn = document.createElement(\"button\");\ntxn.setAttribute(\"id\", \"txn\");\ntxn.innerHTML =  \"Add Txn\";*/\n\n// ## Time Travel\n\nfunction resume() {\n  let toggle_core = document.getElementById(\"toggle core\");\n  let time_slider = document.getElementById(\"time slider\");\n  mech_core.resume();\n  toggle_core.innerHTML = \"Pause\";\n  time_slider.value = time_slider.max;\n  render();\n}\n\nfunction pause() {\n  let toggle_core = document.getElementById(\"toggle core\");\n  mech_core.pause();\n  toggle_core.innerHTML = \"Resume\";\n  render();\n}\n\nlet time_travel = document.createElement(\"div\");\ntime_travel.setAttribute(\"class\", \"time-travel\");\n\nlet time_slider = document.createElement(\"input\");\ntime_slider.setAttribute(\"id\", \"time slider\");\ntime_slider.setAttribute(\"class\", \"slider\");\ntime_slider.setAttribute(\"min\", \"1\");\ntime_slider.setAttribute(\"max\", \"100\");\ntime_slider.setAttribute(\"value\", \"100\");\ntime_slider.setAttribute(\"type\", \"range\");\ntime_travel.appendChild(time_slider);\n\nlet last_slider_value = 100;\ntime_slider.oninput = function() {\n  pause();\n  let current_value = this.value;\n  mech_core.set_time(100 - current_value);\n  render();\n}\n\nlet step_back = document.createElement(\"button\");\nstep_back.setAttribute(\"id\", \"step back\");\nstep_back.innerHTML =  \"<\";\nstep_back.onclick = function() {\n  pause();\n  mech_core.step_back_one();\n  time_slider.value = time_slider.value - 1;\n  render();\n}\ntime_travel.appendChild(step_back);\n\nlet toggle_core = document.createElement(\"button\");\ntoggle_core.setAttribute(\"id\", \"toggle core\");\ntoggle_core.innerHTML =  \"Pause\";\ntoggle_core.onclick = function() {\n  let toggle_core = document.getElementById(\"toggle core\");\n  let state = toggle_core.innerHTML;\n  if (state == \"Resume\") {\n    resume();\n  } else {\n    pause();\n  }\n  render();\n};\ntime_travel.appendChild(toggle_core);\n\nlet step_forward = document.createElement(\"button\");\nstep_forward.setAttribute(\"id\", \"step forward\");\nstep_forward.innerHTML =  \">\";\nstep_forward.onclick = function() {\n  pause();\n  mech_core.step_forward_one();\n  time_slider.value = time_slider.value*1 + 1;\n  render();\n}\ntime_travel.appendChild(step_forward);\n\n// ## Editor Container\n\nlet container = document.createElement(\"div\");\ncontainer.setAttribute(\"id\",\"mech-container\");\ncontainer.setAttribute(\"class\",\"mech-container\");\n\nlet editor_container = document.createElement(\"div\");\neditor_container.setAttribute(\"id\",\"mech-editor-container\");\neditor_container.setAttribute(\"class\",\"mech-editor-container\");\n\ncontainer.appendChild(editor_container);\ncontainer.appendChild(time_travel);\n\n// ## Navigation\n\nlet controls = document.createElement(\"div\");\ncontrols.setAttribute(\"id\",\"mech-controls\");\ncontrols.setAttribute(\"class\",\"mech-controls\");\n\n// Code\nlet code_button = document.createElement(\"a\");\ncode_button.setAttribute(\"class\", \"mech-control ion-pound\");\ncode_button.setAttribute(\"href\", \"/#/docs/index.mec\");\ncontrols.appendChild(code_button);\n\n// Tables\nlet tables_button = document.createElement(\"a\");\ntables_button.setAttribute(\"class\", \"mech-control ion-grid\");\ntables_button.setAttribute(\"href\", \"/#/tables/index.mec\");\ncontrols.appendChild(tables_button);\n\n// Documentation\nlet docs_button = document.createElement(\"a\");\ndocs_button.setAttribute(\"class\", \"mech-control ion-ios-bookmarks\");\ndocs_button.setAttribute(\"href\", \"/#/docs/index.mec\");\ncontrols.appendChild(docs_button);\n\n// ## Bring it all together\n\nlet app = document.createElement(\"div\");\napp.setAttribute(\"id\",\"mech-app\");\napp.setAttribute(\"class\",\"mech-app\");\napp.appendChild(controls);\napp.appendChild(container);\n\ndocument.body.appendChild(app);\n\n// ## Event handlers\nfunction system_timer() {\n  var d = new Date();\n  mech_core.queue_change(\"time/timer\",1,2,time);\n  mech_core.queue_change(\"time/timer\",1,3,d.getHours() % 12);\n  mech_core.queue_change(\"time/timer\",1,4,d.getMinutes());\n  mech_core.queue_change(\"time/timer\",1,5,d.getSeconds());\n  mech_core.process_transaction();\n  time = time + 1;\n  render();\n}\n\nfunction render() {\n  mech_core.render();\n}\n/*\ndocument.getElementById(\"compile\").addEventListener(\"click\", function(click) {\n  mech_core.clear();\n  clearInterval(interval);\n\n  let code = document.getElementById(\"code\");\n  mech_core.compile_code(code.value);\n  mech_core.add_application();\n\n  // Start the timer if there is one\n  let column = mech_core.get_column(\"time/timer\", 1);\n  if (column[0] != undefined) {\n    interval = setInterval(system_timer, column[0]);\n  }\n});\n\ndocument.getElementById(\"view core\").addEventListener(\"click\", function() {\n  mech_core.display_core();\n  mech_core.list_global_tables();\n});\n\ndocument.getElementById(\"view runtime\").addEventListener(\"click\", function() {\n  mech_core.display_runtime();\n});\n\ndocument.getElementById(\"clear core\").addEventListener(\"click\", function() {\n  mech_core.clear();\n  clearInterval(interval);\n  //render();\n});*/\n\n\nwindow.onhashchange = function(event) {\n  let extension = location.hash.substring(location.hash.length - 3);\n  var url = location.hash.substring(1);\n  if (extension == \"mec\") {\n    var xhr = new XMLHttpRequest();\n    console.log(url);\n    xhr.open('GET', url, true);\n    xhr.send();\n  \n    xhr.onreadystatechange = processRequest;\n  } else if (url == \"\") {\n    clearInterval(interval);\n    window.location = \"/#/docs/index.mec\";\n  } else {\n    window.location = event.newURL;\n  }\n\n  function processRequest(e) {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n      let editor = document.getElementById(\"mech-editor-container\");  \n      editor.innerHTML = \"\";\n      clearInterval(interval);\n      let program = xhr.responseText;\n      console.log(program);\n      //code.innerHTML = program;\n      mech_core.clear();\n      mech_core.compile_code(program);\n      mech_core.add_application();\n      // Start the timer if there is one\n      let column = mech_core.get_column(\"time/timer\", 1);\n      if (column[0] != undefined) {\n        interval = setInterval(system_timer, column[0]);\n      }\n    }\n  }\n  \n}\n\nlet extension = location.hash.substring(location.hash.length - 3);\nvar url = location.hash.substring(1);\nif (extension == \"mec\") {\n  clearInterval(interval);\n  var xhr = new XMLHttpRequest();\n  var url = location.hash.substring(1);\n  xhr.open('GET', url, false);\n  xhr.send();\n  let program = xhr.responseText;\n  console.log(program);\n  \n  mech_core.clear();\n  mech_core.compile_code(program);\n  mech_core.add_application();\n  // Start the timer if there is one\n  let column = mech_core.get_column(\"time/timer\", 1);\n  if (column[0] != undefined) {\n    interval = setInterval(system_timer, column[0]);\n  }\n} else if (url == \"\") {\n  clearInterval(interval);\n  window.location = \"/#/docs/index.mec\";\n} else {\n  window.location = event.newURL;\n}\n\n//# sourceURL=webpack:///./editor.js?");

/***/ })

}]);